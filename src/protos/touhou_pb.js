// source: touhou.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.touhou.AttackState', null, global);
goog.exportSymbol('proto.touhou.Avatar', null, global);
goog.exportSymbol('proto.touhou.Empty', null, global);
goog.exportSymbol('proto.touhou.PlayerState', null, global);
goog.exportSymbol('proto.touhou.Pose', null, global);
goog.exportSymbol('proto.touhou.Quaternion4D', null, global);
goog.exportSymbol('proto.touhou.Rig', null, global);
goog.exportSymbol('proto.touhou.Vector3D', null, global);
goog.exportSymbol('proto.touhou.World', null, global);
goog.exportSymbol('proto.touhou.WorldRequest', null, global);
goog.exportSymbol('proto.touhou.WorldState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.touhou.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.touhou.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.touhou.Empty.displayName = 'proto.touhou.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.touhou.Vector3D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.touhou.Vector3D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.touhou.Vector3D.displayName = 'proto.touhou.Vector3D';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.touhou.Quaternion4D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.touhou.Quaternion4D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.touhou.Quaternion4D.displayName = 'proto.touhou.Quaternion4D';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.touhou.Pose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.touhou.Pose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.touhou.Pose.displayName = 'proto.touhou.Pose';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.touhou.Rig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.touhou.Rig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.touhou.Rig.displayName = 'proto.touhou.Rig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.touhou.PlayerState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.touhou.PlayerState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.touhou.PlayerState.displayName = 'proto.touhou.PlayerState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.touhou.WorldState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.touhou.WorldState.repeatedFields_, null);
};
goog.inherits(proto.touhou.WorldState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.touhou.WorldState.displayName = 'proto.touhou.WorldState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.touhou.WorldRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.touhou.WorldRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.touhou.WorldRequest.displayName = 'proto.touhou.WorldRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.touhou.World = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.touhou.World.repeatedFields_, null);
};
goog.inherits(proto.touhou.World, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.touhou.World.displayName = 'proto.touhou.World';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.touhou.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.touhou.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.touhou.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.touhou.Empty}
 */
proto.touhou.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.touhou.Empty;
  return proto.touhou.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.touhou.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.touhou.Empty}
 */
proto.touhou.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.touhou.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.touhou.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.touhou.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.touhou.Vector3D.prototype.toObject = function(opt_includeInstance) {
  return proto.touhou.Vector3D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.touhou.Vector3D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.Vector3D.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.touhou.Vector3D}
 */
proto.touhou.Vector3D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.touhou.Vector3D;
  return proto.touhou.Vector3D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.touhou.Vector3D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.touhou.Vector3D}
 */
proto.touhou.Vector3D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.touhou.Vector3D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.touhou.Vector3D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.touhou.Vector3D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.Vector3D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.touhou.Vector3D.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.touhou.Vector3D} returns this
 */
proto.touhou.Vector3D.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.touhou.Vector3D.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.touhou.Vector3D} returns this
 */
proto.touhou.Vector3D.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float z = 3;
 * @return {number}
 */
proto.touhou.Vector3D.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.touhou.Vector3D} returns this
 */
proto.touhou.Vector3D.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.touhou.Quaternion4D.prototype.toObject = function(opt_includeInstance) {
  return proto.touhou.Quaternion4D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.touhou.Quaternion4D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.Quaternion4D.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    w: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.touhou.Quaternion4D}
 */
proto.touhou.Quaternion4D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.touhou.Quaternion4D;
  return proto.touhou.Quaternion4D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.touhou.Quaternion4D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.touhou.Quaternion4D}
 */
proto.touhou.Quaternion4D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setW(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.touhou.Quaternion4D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.touhou.Quaternion4D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.touhou.Quaternion4D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.Quaternion4D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getW();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.touhou.Quaternion4D.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.touhou.Quaternion4D} returns this
 */
proto.touhou.Quaternion4D.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.touhou.Quaternion4D.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.touhou.Quaternion4D} returns this
 */
proto.touhou.Quaternion4D.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float z = 3;
 * @return {number}
 */
proto.touhou.Quaternion4D.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.touhou.Quaternion4D} returns this
 */
proto.touhou.Quaternion4D.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float w = 4;
 * @return {number}
 */
proto.touhou.Quaternion4D.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.touhou.Quaternion4D} returns this
 */
proto.touhou.Quaternion4D.prototype.setW = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.touhou.Pose.prototype.toObject = function(opt_includeInstance) {
  return proto.touhou.Pose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.touhou.Pose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.Pose.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.touhou.Vector3D.toObject(includeInstance, f),
    orientation: (f = msg.getOrientation()) && proto.touhou.Quaternion4D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.touhou.Pose}
 */
proto.touhou.Pose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.touhou.Pose;
  return proto.touhou.Pose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.touhou.Pose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.touhou.Pose}
 */
proto.touhou.Pose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.touhou.Vector3D;
      reader.readMessage(value,proto.touhou.Vector3D.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = new proto.touhou.Quaternion4D;
      reader.readMessage(value,proto.touhou.Quaternion4D.deserializeBinaryFromReader);
      msg.setOrientation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.touhou.Pose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.touhou.Pose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.touhou.Pose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.Pose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.touhou.Vector3D.serializeBinaryToWriter
    );
  }
  f = message.getOrientation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.touhou.Quaternion4D.serializeBinaryToWriter
    );
  }
};


/**
 * optional Vector3D position = 1;
 * @return {?proto.touhou.Vector3D}
 */
proto.touhou.Pose.prototype.getPosition = function() {
  return /** @type{?proto.touhou.Vector3D} */ (
    jspb.Message.getWrapperField(this, proto.touhou.Vector3D, 1));
};


/**
 * @param {?proto.touhou.Vector3D|undefined} value
 * @return {!proto.touhou.Pose} returns this
*/
proto.touhou.Pose.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.touhou.Pose} returns this
 */
proto.touhou.Pose.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.touhou.Pose.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Quaternion4D orientation = 2;
 * @return {?proto.touhou.Quaternion4D}
 */
proto.touhou.Pose.prototype.getOrientation = function() {
  return /** @type{?proto.touhou.Quaternion4D} */ (
    jspb.Message.getWrapperField(this, proto.touhou.Quaternion4D, 2));
};


/**
 * @param {?proto.touhou.Quaternion4D|undefined} value
 * @return {!proto.touhou.Pose} returns this
*/
proto.touhou.Pose.prototype.setOrientation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.touhou.Pose} returns this
 */
proto.touhou.Pose.prototype.clearOrientation = function() {
  return this.setOrientation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.touhou.Pose.prototype.hasOrientation = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.touhou.Rig.prototype.toObject = function(opt_includeInstance) {
  return proto.touhou.Rig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.touhou.Rig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.Rig.toObject = function(includeInstance, msg) {
  var f, obj = {
    root: (f = msg.getRoot()) && proto.touhou.Pose.toObject(includeInstance, f),
    head: (f = msg.getHead()) && proto.touhou.Pose.toObject(includeInstance, f),
    lefthand: (f = msg.getLefthand()) && proto.touhou.Pose.toObject(includeInstance, f),
    righthand: (f = msg.getRighthand()) && proto.touhou.Pose.toObject(includeInstance, f),
    hips: (f = msg.getHips()) && proto.touhou.Pose.toObject(includeInstance, f),
    leftfoot: (f = msg.getLeftfoot()) && proto.touhou.Pose.toObject(includeInstance, f),
    rightfoot: (f = msg.getRightfoot()) && proto.touhou.Pose.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.touhou.Rig}
 */
proto.touhou.Rig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.touhou.Rig;
  return proto.touhou.Rig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.touhou.Rig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.touhou.Rig}
 */
proto.touhou.Rig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.touhou.Pose;
      reader.readMessage(value,proto.touhou.Pose.deserializeBinaryFromReader);
      msg.setRoot(value);
      break;
    case 2:
      var value = new proto.touhou.Pose;
      reader.readMessage(value,proto.touhou.Pose.deserializeBinaryFromReader);
      msg.setHead(value);
      break;
    case 3:
      var value = new proto.touhou.Pose;
      reader.readMessage(value,proto.touhou.Pose.deserializeBinaryFromReader);
      msg.setLefthand(value);
      break;
    case 4:
      var value = new proto.touhou.Pose;
      reader.readMessage(value,proto.touhou.Pose.deserializeBinaryFromReader);
      msg.setRighthand(value);
      break;
    case 5:
      var value = new proto.touhou.Pose;
      reader.readMessage(value,proto.touhou.Pose.deserializeBinaryFromReader);
      msg.setHips(value);
      break;
    case 6:
      var value = new proto.touhou.Pose;
      reader.readMessage(value,proto.touhou.Pose.deserializeBinaryFromReader);
      msg.setLeftfoot(value);
      break;
    case 7:
      var value = new proto.touhou.Pose;
      reader.readMessage(value,proto.touhou.Pose.deserializeBinaryFromReader);
      msg.setRightfoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.touhou.Rig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.touhou.Rig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.touhou.Rig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.Rig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoot();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.touhou.Pose.serializeBinaryToWriter
    );
  }
  f = message.getHead();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.touhou.Pose.serializeBinaryToWriter
    );
  }
  f = message.getLefthand();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.touhou.Pose.serializeBinaryToWriter
    );
  }
  f = message.getRighthand();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.touhou.Pose.serializeBinaryToWriter
    );
  }
  f = message.getHips();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.touhou.Pose.serializeBinaryToWriter
    );
  }
  f = message.getLeftfoot();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.touhou.Pose.serializeBinaryToWriter
    );
  }
  f = message.getRightfoot();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.touhou.Pose.serializeBinaryToWriter
    );
  }
};


/**
 * optional Pose root = 1;
 * @return {?proto.touhou.Pose}
 */
proto.touhou.Rig.prototype.getRoot = function() {
  return /** @type{?proto.touhou.Pose} */ (
    jspb.Message.getWrapperField(this, proto.touhou.Pose, 1));
};


/**
 * @param {?proto.touhou.Pose|undefined} value
 * @return {!proto.touhou.Rig} returns this
*/
proto.touhou.Rig.prototype.setRoot = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.touhou.Rig} returns this
 */
proto.touhou.Rig.prototype.clearRoot = function() {
  return this.setRoot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.touhou.Rig.prototype.hasRoot = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Pose head = 2;
 * @return {?proto.touhou.Pose}
 */
proto.touhou.Rig.prototype.getHead = function() {
  return /** @type{?proto.touhou.Pose} */ (
    jspb.Message.getWrapperField(this, proto.touhou.Pose, 2));
};


/**
 * @param {?proto.touhou.Pose|undefined} value
 * @return {!proto.touhou.Rig} returns this
*/
proto.touhou.Rig.prototype.setHead = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.touhou.Rig} returns this
 */
proto.touhou.Rig.prototype.clearHead = function() {
  return this.setHead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.touhou.Rig.prototype.hasHead = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Pose leftHand = 3;
 * @return {?proto.touhou.Pose}
 */
proto.touhou.Rig.prototype.getLefthand = function() {
  return /** @type{?proto.touhou.Pose} */ (
    jspb.Message.getWrapperField(this, proto.touhou.Pose, 3));
};


/**
 * @param {?proto.touhou.Pose|undefined} value
 * @return {!proto.touhou.Rig} returns this
*/
proto.touhou.Rig.prototype.setLefthand = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.touhou.Rig} returns this
 */
proto.touhou.Rig.prototype.clearLefthand = function() {
  return this.setLefthand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.touhou.Rig.prototype.hasLefthand = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Pose rightHand = 4;
 * @return {?proto.touhou.Pose}
 */
proto.touhou.Rig.prototype.getRighthand = function() {
  return /** @type{?proto.touhou.Pose} */ (
    jspb.Message.getWrapperField(this, proto.touhou.Pose, 4));
};


/**
 * @param {?proto.touhou.Pose|undefined} value
 * @return {!proto.touhou.Rig} returns this
*/
proto.touhou.Rig.prototype.setRighthand = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.touhou.Rig} returns this
 */
proto.touhou.Rig.prototype.clearRighthand = function() {
  return this.setRighthand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.touhou.Rig.prototype.hasRighthand = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Pose hips = 5;
 * @return {?proto.touhou.Pose}
 */
proto.touhou.Rig.prototype.getHips = function() {
  return /** @type{?proto.touhou.Pose} */ (
    jspb.Message.getWrapperField(this, proto.touhou.Pose, 5));
};


/**
 * @param {?proto.touhou.Pose|undefined} value
 * @return {!proto.touhou.Rig} returns this
*/
proto.touhou.Rig.prototype.setHips = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.touhou.Rig} returns this
 */
proto.touhou.Rig.prototype.clearHips = function() {
  return this.setHips(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.touhou.Rig.prototype.hasHips = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Pose leftFoot = 6;
 * @return {?proto.touhou.Pose}
 */
proto.touhou.Rig.prototype.getLeftfoot = function() {
  return /** @type{?proto.touhou.Pose} */ (
    jspb.Message.getWrapperField(this, proto.touhou.Pose, 6));
};


/**
 * @param {?proto.touhou.Pose|undefined} value
 * @return {!proto.touhou.Rig} returns this
*/
proto.touhou.Rig.prototype.setLeftfoot = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.touhou.Rig} returns this
 */
proto.touhou.Rig.prototype.clearLeftfoot = function() {
  return this.setLeftfoot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.touhou.Rig.prototype.hasLeftfoot = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Pose rightFoot = 7;
 * @return {?proto.touhou.Pose}
 */
proto.touhou.Rig.prototype.getRightfoot = function() {
  return /** @type{?proto.touhou.Pose} */ (
    jspb.Message.getWrapperField(this, proto.touhou.Pose, 7));
};


/**
 * @param {?proto.touhou.Pose|undefined} value
 * @return {!proto.touhou.Rig} returns this
*/
proto.touhou.Rig.prototype.setRightfoot = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.touhou.Rig} returns this
 */
proto.touhou.Rig.prototype.clearRightfoot = function() {
  return this.setRightfoot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.touhou.Rig.prototype.hasRightfoot = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.touhou.PlayerState.prototype.toObject = function(opt_includeInstance) {
  return proto.touhou.PlayerState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.touhou.PlayerState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.PlayerState.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rig: (f = msg.getRig()) && proto.touhou.Rig.toObject(includeInstance, f),
    avatar: jspb.Message.getFieldWithDefault(msg, 3, 0),
    attackState: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.touhou.PlayerState}
 */
proto.touhou.PlayerState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.touhou.PlayerState;
  return proto.touhou.PlayerState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.touhou.PlayerState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.touhou.PlayerState}
 */
proto.touhou.PlayerState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = new proto.touhou.Rig;
      reader.readMessage(value,proto.touhou.Rig.deserializeBinaryFromReader);
      msg.setRig(value);
      break;
    case 3:
      var value = /** @type {!proto.touhou.Avatar} */ (reader.readEnum());
      msg.setAvatar(value);
      break;
    case 4:
      var value = /** @type {!proto.touhou.AttackState} */ (reader.readEnum());
      msg.setAttackState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.touhou.PlayerState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.touhou.PlayerState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.touhou.PlayerState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.PlayerState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.touhou.Rig.serializeBinaryToWriter
    );
  }
  f = message.getAvatar();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAttackState();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.touhou.PlayerState.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.touhou.PlayerState} returns this
 */
proto.touhou.PlayerState.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Rig rig = 2;
 * @return {?proto.touhou.Rig}
 */
proto.touhou.PlayerState.prototype.getRig = function() {
  return /** @type{?proto.touhou.Rig} */ (
    jspb.Message.getWrapperField(this, proto.touhou.Rig, 2));
};


/**
 * @param {?proto.touhou.Rig|undefined} value
 * @return {!proto.touhou.PlayerState} returns this
*/
proto.touhou.PlayerState.prototype.setRig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.touhou.PlayerState} returns this
 */
proto.touhou.PlayerState.prototype.clearRig = function() {
  return this.setRig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.touhou.PlayerState.prototype.hasRig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Avatar avatar = 3;
 * @return {!proto.touhou.Avatar}
 */
proto.touhou.PlayerState.prototype.getAvatar = function() {
  return /** @type {!proto.touhou.Avatar} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.touhou.Avatar} value
 * @return {!proto.touhou.PlayerState} returns this
 */
proto.touhou.PlayerState.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional AttackState attack_state = 4;
 * @return {!proto.touhou.AttackState}
 */
proto.touhou.PlayerState.prototype.getAttackState = function() {
  return /** @type {!proto.touhou.AttackState} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.touhou.AttackState} value
 * @return {!proto.touhou.PlayerState} returns this
 */
proto.touhou.PlayerState.prototype.setAttackState = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.touhou.WorldState.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.touhou.WorldState.prototype.toObject = function(opt_includeInstance) {
  return proto.touhou.WorldState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.touhou.WorldState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.WorldState.toObject = function(includeInstance, msg) {
  var f, obj = {
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.touhou.PlayerState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.touhou.WorldState}
 */
proto.touhou.WorldState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.touhou.WorldState;
  return proto.touhou.WorldState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.touhou.WorldState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.touhou.WorldState}
 */
proto.touhou.WorldState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.touhou.PlayerState;
      reader.readMessage(value,proto.touhou.PlayerState.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.touhou.WorldState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.touhou.WorldState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.touhou.WorldState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.WorldState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.touhou.PlayerState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlayerState players = 1;
 * @return {!Array<!proto.touhou.PlayerState>}
 */
proto.touhou.WorldState.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.touhou.PlayerState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.touhou.PlayerState, 1));
};


/**
 * @param {!Array<!proto.touhou.PlayerState>} value
 * @return {!proto.touhou.WorldState} returns this
*/
proto.touhou.WorldState.prototype.setPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.touhou.PlayerState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.touhou.PlayerState}
 */
proto.touhou.WorldState.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.touhou.PlayerState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.touhou.WorldState} returns this
 */
proto.touhou.WorldState.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.touhou.WorldRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.touhou.WorldRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.touhou.WorldRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.WorldRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    seed: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.touhou.WorldRequest}
 */
proto.touhou.WorldRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.touhou.WorldRequest;
  return proto.touhou.WorldRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.touhou.WorldRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.touhou.WorldRequest}
 */
proto.touhou.WorldRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.touhou.WorldRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.touhou.WorldRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.touhou.WorldRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.WorldRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeed();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string seed = 1;
 * @return {string}
 */
proto.touhou.WorldRequest.prototype.getSeed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.touhou.WorldRequest} returns this
 */
proto.touhou.WorldRequest.prototype.setSeed = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.touhou.World.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.touhou.World.prototype.toObject = function(opt_includeInstance) {
  return proto.touhou.World.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.touhou.World} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.World.toObject = function(includeInstance, msg) {
  var f, obj = {
    terrainList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.touhou.World}
 */
proto.touhou.World.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.touhou.World;
  return proto.touhou.World.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.touhou.World} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.touhou.World}
 */
proto.touhou.World.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTerrain(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.touhou.World.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.touhou.World.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.touhou.World} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.touhou.World.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTerrainList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float terrain = 1;
 * @return {!Array<number>}
 */
proto.touhou.World.prototype.getTerrainList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.touhou.World} returns this
 */
proto.touhou.World.prototype.setTerrainList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.touhou.World} returns this
 */
proto.touhou.World.prototype.addTerrain = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.touhou.World} returns this
 */
proto.touhou.World.prototype.clearTerrainList = function() {
  return this.setTerrainList([]);
};


/**
 * @enum {number}
 */
proto.touhou.Avatar = {
  REIMU: 0,
  MARISA: 1
};

/**
 * @enum {number}
 */
proto.touhou.AttackState = {
  NOT_ATTACKING: 0,
  ATTACKING: 1
};

goog.object.extend(exports, proto.touhou);
